***************
*** 332,485 ****
    // dVbp = -w0*Vhp*dt;
    // dVlp = -w0*Vbp*dt;
  
-   sound_sample dVbp = (w0_ceil_1*Vhp >> 20);
-   sound_sample dVlp = (w0_ceil_1*Vbp >> 20);
-   Vbp -= dVbp;
-   Vlp -= dVlp;
-   Vhp = (Vbp*_1024_div_Q >> 10) - Vlp - Vi;
- }
- 
- // ----------------------------------------------------------------------------
- // SID clocking - delta_t cycles.
- // ----------------------------------------------------------------------------
- RESID_INLINE
- void Filter::clock(cycle_count delta_t,
- 		   sound_sample voice1,
- 		   sound_sample voice2,
- 		   sound_sample voice3,
- 		   sound_sample ext_in)
- {
-   // Scale each voice down from 20 to 13 bits.
-   voice1 >>= 7;
-   voice2 >>= 7;
  
-   // NB! Voice 3 is not silenced by voice3off if it is routed through
-   // the filter.
-   if (voice3off && !(filt & 0x04)) {
-     voice3 = 0;
-   }
-   else {
-     voice3 >>= 7;
-   }
- 
-   ext_in >>= 7;
- 
-   // Enable filter on/off.
-   // This is not really part of SID, but is useful for testing.
-   // On slow CPUs it may be necessary to bypass the filter to lower the CPU
-   // load.
-   if (!enabled) {
-     Vnf = voice1 + voice2 + voice3 + ext_in;
-     Vhp = Vbp = Vlp = 0;
-     return;
-   }
- 
-   // Route voices into or around filter.
-   // The code below is expanded to a switch for faster execution.
-   // (filt1 ? Vi : Vnf) += voice1;
-   // (filt2 ? Vi : Vnf) += voice2;
-   // (filt3 ? Vi : Vnf) += voice3;
- 
-   sound_sample Vi;
- 
-   switch (filt) {
-   default:
-   case 0x0:
-     Vi = 0;
-     Vnf = voice1 + voice2 + voice3 + ext_in;
-     break;
-   case 0x1:
-     Vi = voice1;
-     Vnf = voice2 + voice3 + ext_in;
-     break;
-   case 0x2:
-     Vi = voice2;
-     Vnf = voice1 + voice3 + ext_in;
-     break;
-   case 0x3:
-     Vi = voice1 + voice2;
-     Vnf = voice3 + ext_in;
-     break;
-   case 0x4:
-     Vi = voice3;
-     Vnf = voice1 + voice2 + ext_in;
-     break;
-   case 0x5:
-     Vi = voice1 + voice3;
-     Vnf = voice2 + ext_in;
-     break;
-   case 0x6:
-     Vi = voice2 + voice3;
-     Vnf = voice1 + ext_in;
-     break;
-   case 0x7:
-     Vi = voice1 + voice2 + voice3;
-     Vnf = ext_in;
-     break;
-   case 0x8:
-     Vi = ext_in;
-     Vnf = voice1 + voice2 + voice3;
-     break;
-   case 0x9:
-     Vi = voice1 + ext_in;
-     Vnf = voice2 + voice3;
-     break;
-   case 0xa:
-     Vi = voice2 + ext_in;
-     Vnf = voice1 + voice3;
-     break;
-   case 0xb:
-     Vi = voice1 + voice2 + ext_in;
-     Vnf = voice3;
-     break;
-   case 0xc:
-     Vi = voice3 + ext_in;
-     Vnf = voice1 + voice2;
-     break;
-   case 0xd:
-     Vi = voice1 + voice3 + ext_in;
-     Vnf = voice2;
-     break;
-   case 0xe:
-     Vi = voice2 + voice3 + ext_in;
-     Vnf = voice1;
-     break;
-   case 0xf:
-     Vi = voice1 + voice2 + voice3 + ext_in;
-     Vnf = 0;
-     break;
-   }
- 
-   // Maximum delta cycles for the filter to work satisfactorily under current
-   // cutoff frequency and resonance constraints is approximately 8.
-   cycle_count delta_t_flt = 8;
- 
-   while (delta_t) {
-     if (delta_t < delta_t_flt) {
-       delta_t_flt = delta_t;
-     }
- 
-     // delta_t is converted to seconds given a 1MHz clock by dividing
-     // with 1 000 000. This is done in two operations to avoid integer
-     // multiplication overflow.
- 
-     // Calculate filter outputs.
-     // Vhp = Vbp/Q - Vlp - Vi;
-     // dVbp = -w0*Vhp*dt;
-     // dVlp = -w0*Vbp*dt;
-     sound_sample w0_delta_t = w0_ceil_dt*delta_t_flt >> 6;
  
-     sound_sample dVbp = (w0_delta_t*Vhp >> 14);
-     sound_sample dVlp = (w0_delta_t*Vbp >> 14);
-     Vbp -= dVbp;
      Vlp -= dVlp;
-     Vhp = (Vbp*_1024_div_Q >> 10) - Vlp - Vi;
  
-     delta_t -= delta_t_flt;
-   }
  }
  
- 
  // ----------------------------------------------------------------------------
  // SID audio output (20 bits).
  // ----------------------------------------------------------------------------
--- 303,346 ----
    // dVbp = -w0*Vhp*dt;
    // dVlp = -w0*Vbp*dt;
  
+     /* According to my measurements, the restoring force of w0 is
+      * approximately doubled when a voice is blasting at full volume compared
+      * to meager-low sustain levels of 1. It seems most of the effect occurs
+      * when sustain grows above 9. */
+ 
+       /* these are 0-based, Vi is not. Additionally, this allows
+        * resonance drive the cf shift. */
+       sound_sample Vi_abs1 = Vlp - Vbp;
+       if (Vi_abs1 < 0)
+         Vi_abs1 = -Vi_abs1;
+       sound_sample Vi_abs2 = Vbp - Vhp;
+       if (Vi_abs2 < 0)
+         Vi_abs2 = -Vi_abs2;
+       sound_sample Vi_abs = Vi_abs1 + Vi_abs2;
+ 
+       /* react quickly to rise above current level, but decay slowly */ 
+       Vi_peak += Vi_peak < Vi_abs ? 128 : -4;
+       /* Vi_peak can only see values above 1x FILTER_SHIFT. */
+       if (Vi_peak < FILTER_SHIFT_START)
+         Vi_peak = FILTER_SHIFT_START;
+ 
+       /* this equation is like w0_eff = (1 + fraction) * w0 where
+        * fraction is the part of Vi_peak exceeding FILTER_SHIFT_START divided
+        * by FILTER_SHIFT. It just looks a bit complicated. I have to shift
+        * the factors a bit to avoid overflowing 32-bit integer. */
+       w0_eff = w0 + w0 * ((Vi_peak >> 2) - (FILTER_SHIFT_START >> 2)) / (FILTER_SHIFT >> 2);
+       if (w0_eff > static_cast<sound_sample> (2 * pi * 20000 * 1.048576))
+         w0_eff = static_cast<sound_sample> (2 * pi * 20000 * 1.048576);
  
+   Vhp = (Vbp*_1024_div_Q >> 10) - Vlp - Vi;
  
+   sound_sample dVlp = (w0_eff*Vbp >> 20);
      Vlp -= dVlp;
  
+   sound_sample dVbp = (w0_eff*Vhp >> 20);
+   Vbp -= dVbp;
  }
  
  // ----------------------------------------------------------------------------
  // SID audio output (20 bits).
  // ----------------------------------------------------------------------------
